# -*- coding: utf-8 -*-
"""SQL_ChatBot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UQTC946Tl7ntDjsmfJ0SXHyuKT981avM
"""

!pip install gradio groq --quiet

import os

os.environ["GROQ_API_KEY"] = "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"

import gradio as gr

# import gradio as gr
from groq import Groq

# Initialize Groq client
client = Groq()

# SQL keyword list
SQL_KEYWORDS = [
    "select", "insert", "update", "delete", "join", "index", "where", "from", "group by",
    "order by", "having", "create", "drop", "alter", "table", "view", "procedure", "function",
    "trigger", "constraint", "primary key", "foreign key", "normalization", "sql", "database",
    "transaction", "rollback", "commit", "performance", "execution plan", "query", "union",
    "distinct", "like", "limit", "offset", "exists"
]

def is_sql_related(text):
    return any(keyword in text.lower() for keyword in SQL_KEYWORDS)

# System prompt
def get_base_messages():
    return [{
        "role": "system",
        "content": (
            "You are a strict SQL assistant. Only answer questions related to SQL, "
            "relational databases, SQL syntax, performance tuning, optimization, "
            "indexes, transactions, or similar topics. Do not answer anything else."
        )
    }]

# Main chat function
def chat(user_message, history):
    if not is_sql_related(user_message):
        bot_reply = "‚ùå Only SQL or database-related queries are allowed."
        history.append([user_message, bot_reply])
        return history, history

    # Build messages from history
    messages = get_base_messages()
    for user, assistant in history:
        messages.append({"role": "user", "content": user})
        messages.append({"role": "assistant", "content": assistant})

    messages.append({"role": "user", "content": user_message})

    # Call the Groq LLM
    response = client.chat.completions.create(
        model="llama-3.1-8b-instant",
        messages=messages
    )
    bot_reply = response.choices[0].message.content

    # Update history
    history.append([user_message, bot_reply])
    return history, history

with gr.Blocks() as demo:
    gr.Markdown("## üí¨ SQL-Only Chatbot (Groq + Gradio)")
    chatbot = gr.Chatbot(label="SQL Assistant")
    msg = gr.Textbox(label="Ask your SQL question", placeholder="E.g., How do I optimize a SELECT query?")
    clear = gr.Button("Clear Chat")
    state = gr.State([])

    def chat_with_clear(user_message, history):
        updated_history, new_state = chat(user_message, history)
        return "", updated_history, new_state

    msg.submit(chat_with_clear, [msg, state], [msg, chatbot, state])
    clear.click(lambda: ([], []), outputs=[chatbot, state])

demo.launch(share=True)